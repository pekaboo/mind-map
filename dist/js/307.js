"use strict";(self["webpackChunkthoughts"]=self["webpackChunkthoughts"]||[]).push([[307],{80307:function(e,t,i){i.r(t),i.d(t,{default:function(){return v}});var s=function(){var e=this;e._self._c;return e._m(0)},a=[function(){var e=this,t=e._self._c;return t("div",[t("h1",[e._v("AssociativeLine plugin")]),t("blockquote",[t("p",[e._v("v0.4.5+")])]),t("blockquote",[t("p",[e._v("The function of adjusting associated line control points is supported from v0.4.6+")])]),t("blockquote",[t("p",[e._v("Relevance support for text editing starting from v0.5.11+")])]),t("p",[e._v("This plugin is used to support the addition of associative lines.")]),t("h2",[e._v("Register")]),t("pre",{staticClass:"hljs"},[t("code",[t("span",{staticClass:"hljs-keyword"},[e._v("import")]),e._v(" MindMap "),t("span",{staticClass:"hljs-keyword"},[e._v("from")]),e._v(" "),t("span",{staticClass:"hljs-string"},[e._v("'simple-mind-map'")]),e._v("\n"),t("span",{staticClass:"hljs-keyword"},[e._v("import")]),e._v(" AssociativeLine "),t("span",{staticClass:"hljs-keyword"},[e._v("from")]),e._v(" "),t("span",{staticClass:"hljs-string"},[e._v("'simple-mind-map/src/plugins/AssociativeLine.js'")]),e._v("\n"),t("span",{staticClass:"hljs-comment"},[e._v("// import AssociativeLine from 'simple-mind-map/src/AssociativeLine.js' Use this path for versions below v0.6.0")]),e._v("\n\nMindMap.usePlugin(AssociativeLine)\n")])]),t("p",[e._v("After registration and instantiation of "),t("code",[e._v("MindMap")]),e._v(", the instance can be obtained through "),t("code",[e._v("mindMap.associativeLine")]),e._v(".")]),t("h2",[e._v("Config")]),t("p",[e._v("Support for modifying the thickness and color of associated lines, divided into default and active states. The configuration is as follows:")]),t("ul",[t("li",[t("p",[t("code",[e._v("associativeLineWidth")]),e._v(": The thickness of the default state of the associated line. The default value is "),t("code",[e._v("2")])])]),t("li",[t("p",[t("code",[e._v("associativeLineColor")]),e._v(": Color of the default state of associative lines. The default value is "),t("code",[e._v("rgb(51, 51, 51)")])])]),t("li",[t("p",[t("code",[e._v("associativeLineActiveWidth")]),e._v(": The thickness of the active state of the associated line. The default value is "),t("code",[e._v("8")])])]),t("li",[t("p",[t("code",[e._v("associativeLineActiveColor")]),e._v(": The color of the active state of the associated line. The default value is "),t("code",[e._v("rgba(2, 167, 240, 1)")])])])]),t("p",[e._v("The configuration is provided as a theme, so if you want to modify these four properties, you can modify them using the "),t("code",[e._v("mindMap.setThemeConfig(config)")]),e._v(" method.")]),t("h2",[e._v("Props")]),t("h3",[e._v("mindMap.associativeLine.lineList")]),t("p",[e._v("Currently, all connection line data, array types, and each item of the array are also an array:")]),t("pre",{staticClass:"hljs"},[t("code",[e._v("[\n    path, "),t("span",{staticClass:"hljs-comment"},[e._v("// Connector node")]),e._v("\n    clickPath, "),t("span",{staticClass:"hljs-comment"},[e._v("// Invisible click line node")]),e._v("\n    node, "),t("span",{staticClass:"hljs-comment"},[e._v("// Start node")]),e._v("\n    toNode "),t("span",{staticClass:"hljs-comment"},[e._v("// Target node")]),e._v("\n]\n")])]),t("h3",[e._v("mindMap.associativeLine.activeLine")]),t("p",[e._v("The currently active connection line and array type are the same as the structure of each item in the "),t("code",[e._v("lineList")]),e._v(" array.")]),t("h2",[e._v("Methods")]),t("h3",[e._v("renderAllLines()")]),t("p",[e._v("Re-render all associated lines.")]),t("h3",[e._v("removeAllLines()")]),t("p",[e._v("Remove all associated lines.")]),t("h3",[e._v("createLineFromActiveNode()")]),t("p",[e._v("Create an associated line from the current active node. If there are multiple active nodes, the default is the first node.")]),t("p",[e._v("After calling this method, an association line will be rendered from the first active node to the current mouse real-time position. When a target node is clicked, it represents completion of creation. An association line will be rendered between the first active node and the clicked node.")]),t("h3",[e._v("createLine(fromNode)")]),t("p",[e._v("Creates an associative line starting at the specified node.")]),t("p",[e._v("After calling this method, an association line will be rendered from the specified node to the current mouse real-time position. When a target node is clicked, it represents completion of creation, and an association line will be rendered between the specified node and the clicked node.")]),t("h3",[e._v("addLine(fromNode, toNode)")]),t("p",[e._v("Add an associative line directly.")]),t("p",[e._v("Calling this method will directly create an association line from the "),t("code",[e._v("fromNode")]),e._v(" to the "),t("code",[e._v("toNode")]),e._v(" node.")]),t("h3",[e._v("removeLine()")]),t("p",[e._v("Deletes the currently active associative line. Clicking on an associated line is considered active.")]),t("h3",[e._v("clearActiveLine()")]),t("p",[e._v("Clears the active state of the currently active association line.")]),t("h3",[e._v("front()")]),t("blockquote",[t("p",[e._v("v0.8.0+")])]),t("p",[e._v("The top-level display of the associated line.")]),t("h3",[e._v("back()")]),t("blockquote",[t("p",[e._v("v0.8.0+")])]),t("p",[e._v("The associated line returns to its original level.")])])}],o={},n=o,c=i(43418),l=(0,c.Z)(n,s,a,!1,null,null,null),v=l.exports}}]);